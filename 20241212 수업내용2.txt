2024 12/12 수업 2

1. maven project 생성 app09
--------------------------------------------------------------------------------------------------------------------------------------------

2. pom.xml , 과 web.xml 그전에 만들어논거 카피 한후 업데이트 
--------------------------------------------------------------------------------------------------------------------------------------------

3. root-context.xml 복붙 app09 로수정
   servlet-context 
    <resources mapping="/assets/**" location="/assets/" /> 경로 수정
--------------------------------------------------------------------------------------------------------------------------------------------

4.src/main/webapp/ 밑에 asssets 폴더 만들고 그밑에 css, images, js 3가지폴더만들기
5. 각각 폴더밑에 파일만들기
6. main.jsp로 와서 작업하기
head태그안에 스타일 주고
<style>
  .logo {
    font-size: 0px;
    width: 136px;
    height: 46px;
    background-image: url('/app09/assets/images/logo_google.png');
    background-size: 100% 100%;
    background-repeat: no-repeat;
    margin: 20px auto;
    cursor: pointer;
  }
</style>

</head>
바디태그에 스크립트
<body>
  
  <h1 id="logo" class="logo">Google</h1>
  
  <script>
  
  	const logo = document.getElementById('logo');
  	logo.addEventListener('click', (event) => {
  		location.href = '${contextPath}/main.do';
  	})
  
  
  </script>
  </body>
--------------------------------------------------------------------------------------------------------------------------------------------

7. but 우리가 따로 css 파일과 js파일을 만들었기 때문에
따로따로 만들어서 jsp 에서 불러오기로함
불러오는 방법은
css
head 태그 안에
<link rel="stylesheet" href="${contextPath}/assets/css/main.css"> +rel="stylesheet" 는 그냥 css에서 정해진 것

js
body 태그안에
 <script src="${contextPath}/assets/css/main.js"></script>

but css파일은 그냥 복붙하면 되지만
     js에서는 ${contextPath}가 적용이안됨 그래서 
    js에서 함수로만들어주는 작업을 해야함

function getContextPath() {
	const url = location.href; 						 /* http://localhost:8080/app09/main.do */
	const host = location.host; 					 /* locathost:8080 */
	const begin = url.indexOf(host) + host.length;   /* 7 + 14 = 21                    : contextPath 의 시작 인덱스 */ 
	const end = url.indexOf('/', begin + 1);	     /* 22번째 인덱스부터 찾아라  = 27 : Mapping의 시작 인덱스 */
	const contextPath = url.substring(begin, end);   /* 인덱스 begin부터 인덱스 end 이전까지 */
	return contextPath;
} 


function toMain() {
  const logo = document.getElementById('logo');
  logo.addEventListener('click', (event) => {
    location.href = getContextPath() + '/main.do';
  })
}

onload = () => {
	toMain();
}
--------------------------------------------------------------------------------------------------------------------------------------------

8. workbench에서 DB 작업하기 -- table 만들고 돌리기

--------------------------------------------------------------------------------------------------------------------------------------------

9. package 5개 만들기
controller
dao
dto
servie
util

(1) dto 부터 작업 table 별로 생성
AttachDto 
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Builder
@ToString
lombok6개
public class AttachDto {
  
  private int attachId;
  private int noticeId;
  private String filePath;
  private String originalFilename;
  private String filesystemName;

} -- db 테이블만든거 보고 하면됨. table이 두개니까 NoticeDto 도 같은 방식으로 만들면 됨.
여기까지하면  http://localhost:8080/app09/ 기에
 로고 클릭하면 http://localhost:8080/app09/main.do 까지 만든 것임
--------------------------------------------------------------------------------------------------------------------------------------------


2024 12 13 이어서 app09

첨부목록이필요\
10 INoticeDao

    NoticeDaoImpl 만들기  INoticeDao 참조해서


    noticeMapper.XML 가서 쿼리문 작업 -- DB 보고 작업하면되고
    셀렉트는 결과타입 이 없으며면 오류남 resultType
	<select id="selectNoticeList" resultType="NoticeDto">
    SELECT notice_id, notice_title, notice_contents, created_at
      FROM tbl_notice
  ORDER BY notice_id DESC
  </select>
  
  <select id="selectNoticeById" parameterType="int" resultType="NoticeDto">
   SELECT notice_id, notice_title, notice_contents, created_at
     FROM tbl_notice
    WHRER notice_id = #{noticeId} 
  </select>
  
  <select id="selectAttachListByNoticeId" parameterType="int" resultType="AttachDto">
    SELECT attach_id, notice_id, file_path, original_filename, filesystem_name
      FROM tbl_attach
     WHRER notice_id = #{noticeId}
  </select>
  
  <insert id="insertNotice" parameterType="NoticeDto">
    INSERT INTO tbl_notice
    VALUES (null, #{noticeTitle}, #{noticeContents}, NOW())
  </insert>
  
  <insert id="insertAttach" parameterType="AttachDto">
    INSERT INTO tbl_attach
    VALUES (null, #{noticeId}, #{filePath}, #{originalFilename}, #{filesystemName})
  </insert>
  
  <delete id="deleteNotice" parameterType="int"> -------->id는 dao type 도 파라미터 그대로받아오면됨.
    DELETE
      FROM tbl_notice
     WHERE notice_id = #{noticeId}
  </delete>


main.jsp

NoticeController

INoticeService

NoticeServiceImpl

다시 NoticeController
private final INoticeService noticeService;

// 목록을 받아와서 list에 저장한다.
model.addAttribute("noticeList", noticeService.getNoticeList());

list.jsp 만들기

다시 NoticeController 가서
  @RequestMapping(value="/write.do")
    public String write() {
    return "notice/write";
  }
    만들고 

write.jsp 만들기 

다시 NoticeController 
@RequestMapping(value="regist.do", method=RequestMethod.POST)
 public String regist(MultipartHttpServletRequest multipartrequest, RedirectAttributes redirectAttributes) {
   
   return "redirect:/notice/list.do";

INoticeService
String registNotice(MultipartHttpServletRequest multipartRequest);

 NoticeServiceImpl 가서 오버라이드

NoticeController 가서 서비스 호출

list.jsp 가서  script작성
             후 돌려보기
목록만들기

다시 NoticeController 
@RequestMapping(value="/detail.do")
 public String detail(int noticeId, Model model) { //select 는 언제나 forward  forword 는 model
   return "notice/detail";

INoticeService
Map<String, Object> getNoticeById(int noticeId);

NoticeServiceImpl 가서 오버라이드
@Override
  public Map<String, Object> getNoticeById(int noticeId) {
    return Map.of("n", noticeDao.selectNoticeById(noticeId)
                , "attachList", noticeDao.selectAttachListByNoticeId(noticeId));
  }

다시 NoticeController 
 @RequestMapping(value="/detail.do")
 public String detail(int noticeId, Model model) { //select 는 언제나 forward  forword 는 model
   Map<String, Object> map = noticeService.getNoticeById(noticeId);
   model.addAttribute("n",map.get("n"));
   model.addAttribute("attachList", map.get("attachList"));
   return "notice/detail";
 }

detail.jsp만들기




삭제 구현하기
detail.jsp

NoticeController 
 @RequestMapping(value="/remove.do")
 public String remove(int noticeId, RedirectAttributes redirectAttributes) {
   return "redirect:/notice/list.do";
   
 }
 INoticeService
 String removeNotice(int noticeId);

NoticeServiceImpl 
오버라이드
  @Override
  public String removeNotice(int noticeId) {
    
    // 첨부된 파일 삭제
    for(AttachDto attachDto : noticeDao.selectAttachListByNoticeId(noticeId)) {
      File file = new File(attachDto.getFilePath(), attachDto.getFilesystemName());
      if(file.exists())
        file.delete();
    }
    // DB에서 공지사항 삭제(관련 첨부 파일은 ON DELETE CASCADE 외래키 옵션에 의해서 함께 삭제)
    int result = noticeDao.deleteNotice(noticeId);
    
    return result == 1 ? "공지사항 삭제 성공" : " 공지사항 삭제 실패";
  }

다시 NoticeController 
@RequestMapping(value="/remove.do")
 public String remove(int noticeId, RedirectAttributes redirectAttributes) {
   redirectAttributes.addFlashAttribute("msg", noticeService.removeNotice(noticeId));
   
   return "redirect:/notice/list.do";

--------------------------------------------------------------------------------------------------------------------

다운로드 를위해서 dao와 mapper작업이 필요
INoticeDao 
AttachDto selectAttachById(int attachId); 추가
NoticeDaoImpl 에서 오버라이드
 @Override
  public AttachDto selectAttachById(int attachId) {
    return template.selectOne("mybatis.mappers.noticeMapper.selectAttachById", attachId);
    
detail작업
 <div style="background-color: green;">
    <h4>첨부파일</h4>
    <c:forEach items="${attachList}" var="a">
      <div><a href="${contextPath}/notice/download.do?attachId=${a.attachId}" class="download-link">${a.originalFilename}</a></div>
    </c:forEach>
  </div>
  

  <h1>${n.noticeTitle}</h1>
  <pre>${n.noticeContents}</pre>
  
  <div><a href="${contextPath}/notice/remove.do?noticeId=${n.noticeId}">삭제</a></div>
  
  <script>
  
  	function confirmDownload() {
  		const downloadLink = document.getElementByClassName('download-link');
  		for(const link of downloadLink) {
  			link.addEventlistener('click', (event) => {
  				if(!confirm('해당 첨부 파일을 다운로드 할까요?')) {
  					even.preventDefault(); // <a> 태그의 href 이동을 막는 코드
  					return;
  				}
  			})
  		}
  		
  	}
   
  	confirmDownload();
  
  
  </script>
  
INoticeService
ResponseEntity<Resource> download(int attachId, String userAgent); 아직안배움

NoticeServiceImpl
 <!-- INNER JOIN을하면 공통으로 있는 것만 보여주기 때문에 파일첨부가 된 항목만보여줌   --> 