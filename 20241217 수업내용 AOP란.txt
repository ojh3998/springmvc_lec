2024 12 17  수업내용
AOP 를 활용해서 트렌잭션
1.maven repositry 구글링
   aspectj 검색
   AspectJ Weaver , AspectJ Runtime (1.9.22.1버전)두가지 가져오기
   porm.xml 안에서
   version이 같으면 properties태그안에서 변수로지정하고 변수를 각각 버전안에 ${ }로 작성

  후 업데이트 하면 됨

AOP
1. Aspect Oriented Programming
2. 관점 지향 프로그래밍
3. 특정 시점에 반복적으로 동작 시킬 작업을 등록할 때 사용
4. 비즈니스 메소드마다 반복해서 처리해야 하는 부분(로깅처리, 트랜잭션 처리 등)을 
   여러번 작성하지 않고 하나의 코드만으로 반복해서 적용하는 프로그래밍 방식
5. 개념 이해
		
		(횡단)이라고 표현
                @Controller -> @Service ->  @Repository -> DB                                            트랜잭션
/writ.do                                                                                                 원자성 - 나누어서 할 수 없음 EX) 은행업무 이체 출금 하면 무조건 입금이 있어야함
/regist.do                                                                                                        모두 성공하거나 모두 실패해야함
/modify.do                                                                                                
/remove.do
/list.do
/detail.do
                     ↑             ↑  
		   (종단)        (종단)
		   로그남기기    트랜잭션

6. AOP 핵심 용어 
  1) JoinPoint : AOP를 적용할 메소드 전체를 의미합니다. (AOP 가 적용 될 후보들)
  2) PointCut  : JoinPoint 중에서 AOP를 적용한 메소드를 의미합니다. (그중에 선택된 것)        
  3) Advice    : AOP작업 자체를 의미합니다. (로그남기기, 트랜잭션 등)

7. Advice의 동작 시점
 1) @Before : PointCut 동작 이전
 2) @After  : PointCut 동작 이후 ( 동작 이후 에외 발생 여부와 상관 없이 동작)
 3) @Around : PointCut 동작 이전과 이후 모두 동작
 4) @AfterReturning : PointCut 정상 동작 이후(성공할 때만 한다는 이야기)
 4) @AfterThrowing : PointCut 예외 발생 이후                 